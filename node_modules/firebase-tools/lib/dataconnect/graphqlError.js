"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prettifyWithWorkaround = exports.prettify = void 0;
const Table = require("cli-table");
function prettify(err) {
    var _a, _b, _c, _d;
    const message = err.message;
    let header = (_b = (_a = err.extensions) === null || _a === void 0 ? void 0 : _a.file) !== null && _b !== void 0 ? _b : "";
    if (err.locations && err.locations.length) {
        const line = (_d = (_c = err.locations[0]) === null || _c === void 0 ? void 0 : _c.line) !== null && _d !== void 0 ? _d : "";
        if (line) {
            header += `:${line}`;
        }
    }
    return header.length ? `${header}: ${message}` : message;
}
exports.prettify = prettify;
function prettifyWithWorkaround(errs) {
    var _a, _b;
    const table = new Table({
        head: ["Issue", "Workaround", "Reason"],
        style: { head: ["yellow"] },
    });
    for (const e of errs) {
        if (!((_b = (_a = e.extensions) === null || _a === void 0 ? void 0 : _a.workarounds) === null || _b === void 0 ? void 0 : _b.length)) {
            table.push([prettify(e), "", ""]);
        }
        else {
            const workarounds = e.extensions.workarounds;
            for (let i = 0; i < workarounds.length; i++) {
                if (i === 0) {
                    table.push([prettify(e), workarounds[i].Description, workarounds[i].Reason]);
                }
                else {
                    table.push(["", workarounds[i].Description, workarounds[i].Reason]);
                }
            }
        }
    }
    return table.toString();
}
exports.prettifyWithWorkaround = prettifyWithWorkaround;
